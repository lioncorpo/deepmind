// Copyright 2020 DeepMind Technologies Limited.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package courier;

import "tensorflow/core/framework/tensor.proto";

message SerializedObject {
  reserved 7;

  oneof payload {
    // Basic scalars.
    int64 int_value = 1;
    double double_value = 2;
    bool bool_value = 3;
    bytes string_value = 4;
    bytes unicode_value = 13;
    // List/Tuple.
    SerializedList list_value = 5;
    // Unordered dict.
    SerializedDict dict_value = 6;
    // Python None value.
    bool none_value = 8;
    // Custom Python object which implements a __reduce__  method.
    ReducedObject reduced_object_value = 12;
    // tensorflow::Tensor or Python numpy array.
    tensorflow.TensorProto tensor_value = 9;
    // Python type object.
    TypeValue type_value = 14;
    // JAX: jax.numpy.array. Will be unpacked as numpy array just like
    // tensor_value but has its own target as the bfloat16 numpy dtype is not
    // shared between tensorflow and JAX.
    tensorflow.TensorProto jax_tensor_value = 15;
  }

  // Holds type information in case `payload` was constructed from a numpy
  // array. We need this information to ensure that numpy arrays types are
  // preserved when being serialized and de-serialized.
  enum NumpyMetadata {
    // Payload was not constructed from a numpy array.
    NO_NUMPY_ARRAY = 0;

    // Payload was constructed from a numpy array of type unicode. The tensor is
    // cast to a unicode tensor when deserialized for Python. This ensures that
    // numpy unicode tensors sent via Courier are also received as numpy unicode
    // tensors in Python clients.
    UNICODE_TENSOR = 1;

    // Payload was constructed from a numpy array of type object. The tensor is
    // constructed from `numpy_object_tensor_payload` instead of
    // `payload.tensor_value` when de-serializing to Python. Note that
    // `tensor_value` is still used for all other de-serialization endpoints
    // (e.g. C++, TensorFlow). This ensures that numpy arrays of type object are
    // deserialized to numpy arrays of type object.
    OBJECT_TENSOR = 2;
  }
  NumpyMetadata numpy_metadata = 16;

  // Entries of the numpy object tensor. Note that when this is populated,
  // `tensor_value` contains string representations of the objects and this
  // field holds best-effort serializations of the objects.
  SerializedNumpyObjectTensor numpy_object_tensor = 17;
}

message SerializedNumpyObjectTensor {
  repeated SerializedObject payload = 1;
  repeated int64 shape = 2;
}

message SerializedList {
  repeated SerializedObject items = 1;
  // Special Python tuple.
  bool is_tuple = 2;
}

message SerializedDict {
  repeated SerializedObject keys = 1;
  repeated SerializedObject values = 2;
}

message CallArguments {
  // Arguments of the method call.
  repeated SerializedObject args = 1;

  // Keyword arguments for the method call (Python only).
  map<string, SerializedObject> kwargs = 2;
}

message CallResult {
  // Return value of the method call.
  SerializedObject result = 1;
}

message ReducedObject {
  string class_module = 1;
  string class_name = 2;
  SerializedObject args = 3;
  SerializedObject state = 4;
  SerializedObject items = 5;
  SerializedObject kvpairs = 6;
}

// Message used to store Callables; eg classes, functions and builtins.
message TypeValue {
  bytes module = 1;
  bytes name = 2;
}
